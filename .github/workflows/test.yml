name: Test CLI

on:
  push:
  pull_request:
  workflow_call:

jobs:
  docker-lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Validate misc/folio-vault/Dockerfile
        uses: hadolint/hadolint-action@v3.3.0
        with:
          dockerfile: ./eureka-cli/misc/folio-vault/Dockerfile

      - name: Validate misc/folio-kafka-tools/Dockerfile
        uses: hadolint/hadolint-action@v3.3.0
        with:
          dockerfile: ./eureka-cli/misc/folio-kafka-tools/Dockerfile

      - name: Validate misc/docker-compose.yml
        run: docker compose -f ./eureka-cli/misc/docker-compose.yaml config

  docker-trivy:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check Docker configurations
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './eureka-cli/misc/folio-vault/Dockerfile'

      - name: Check folio-kafka-tools Dockerfile
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './eureka-cli/misc/folio-kafka-tools/Dockerfile'

  go-lint:
    name: Go Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go Environment
        uses: ./.github/actions/setup-go

      - name: Go Vet
        working-directory: ./eureka-cli
        run: go vet ./...

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          working-directory: ./eureka-cli
          args: --timeout=5m
          only-new-issues: true

  go-trivy:
    name: Go Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go Environment
        uses: ./.github/actions/setup-go

      - name: Download Go dependencies
        working-directory: ./eureka-cli
        run: go mod download

      - name: Run Trivy vulnerability scanner on Go dependencies
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './eureka-cli'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (table output)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './eureka-cli'
          format: 'table'
          severity: 'CRITICAL,HIGH'

  test:
    name: Test CLI Help Command (${{ matrix.os }}-${{ matrix.goarch }})
    needs: [go-lint, docker-lint, docker-trivy, go-trivy]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goarch: amd64
          - os: windows-latest
            goarch: amd64
          - os: macos-latest
            goarch: amd64
          - os: macos-latest
            goarch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go Environment
        uses: ./.github/actions/setup-go

      - name: Set up .eureka directory permissions
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            mkdir -p "$USERPROFILE\.eureka"
          else
            mkdir -p "$HOME/.eureka"
            chmod -R 0700 "$HOME/.eureka"
          fi
        env:
          RUNNER_OS: ${{ runner.os }}

      - name: Build CLI
        working-directory: ./eureka-cli
        env:
          GOOS: ${{ runner.os == 'Windows' && 'windows' || runner.os == 'Linux' && 'linux' || 'darwin' }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -o eureka-cli${{ runner.os == 'Windows' && '.exe' || '' }}

      - name: Run Help Command Test
        working-directory: ./eureka-cli
        shell: bash
        run: |
          ./eureka-cli${{ runner.os == 'Windows' && '.exe' || '' }} help -d
          echo "Help command ran successfully"
