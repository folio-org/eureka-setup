networks:
  eureka-net:
    name: eureka
    driver: bridge

volumes:
  postgres-data:
    name: eureka_postgres_data
  vault-data:
    name: eureka_vault_data
  vault-file:
    name: eureka_vault_file
  vault-logs:
    name: eureka_vault_logs
  kafka-data:
    name: eureka_kafka_data
  minio-data:
    name: eureka_minio_data
  ftp-data:
    name: eureka_ftp_data

services:
  ### Netcat (required by checkPorts command) ###
  netcat:
    container_name: netcat
    build:
      context: .
      dockerfile_inline: |
        FROM nginx:1.27.4
        RUN apt update; apt install netcat-traditional -y
    image: netcat:latest
    restart: unless-stopped
    cpus: "0.25"
    mem_limit: 35m
    memswap_limit: -1
    networks:
      - eureka-net
    healthcheck:
      test: nc -zv localhost 80 || exit 1
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 5s

  ### Postgres (required)  ###
  postgres:
    container_name: postgres
    image: postgres:16.8
    restart: unless-stopped
    command: [
      "-c", "max_connections=500", 
      "-c", "shared_buffers=1024MB",
      "-c", "log_duration=on", 
      "-c", "log_min_duration_statement=0ms",
      "-c", "shared_preload_libraries=pg_stat_statements",
      "-c", "max_locks_per_transaction=1024", 
      "-c", "jit=off" 
    ]
    cpus: 2
    mem_limit: 1.2g
    memswap_limit: -1
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: supersecret
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - eureka-net
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 10s
      retries: 10

  ### Kafka UI (optional), Kafka (required), Kafka tools (required) ###
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    restart: unless-stopped
    cpus: "0.5"
    mem_limit: 350m
    memswap_limit: -1
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka-local
      KAFKA_CLUSTERS_0_JMXPORT: 9997
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka.eureka:9092
    networks:
      - eureka-net
    ports:
      - "9080:8080"
    healthcheck:
      test: wget --spider --timeout 1 localhost:8080
      interval: 10s
      timeout: 10s
      retries: 10

  kafka:
    container_name: kafka
    image: apache/kafka-native:4.1.0
    restart: unless-stopped
    cpus: 6
    mem_limit: 2g
    memswap_limit: -1
    environment:
      CLUSTER_ID: kafka-local
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - eureka-net
    ports:
      - "9092:9092"
    healthcheck:
      test: nc -zv localhost 9092 || exit 1
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 5s

  kafka-tools:
    container_name: kafka-tools
    build:
      context: .
      dockerfile_inline: |
        FROM ubuntu:22.04
        RUN apt-get update && \
            apt-get install -y wget openjdk-17-jre-headless coreutils bash procps && \
            wget -q https://dlcdn.apache.org/kafka/4.1.0/kafka_2.13-4.1.0.tgz && \
            tar -xzf kafka_2.13-4.1.0.tgz && \
            mv kafka_2.13-4.1.0 /opt/kafka && \
            ln -s /opt/kafka/bin/* /usr/local/bin/ && \
            rm kafka_2.13-4.1.0.tgz && \
            apt-get clean && \
            rm -rf /var/lib/apt/lists/* && \
            which bash && ls -la /bin/bash /usr/bin/bash
        ENV PATH="/opt/kafka/bin:/usr/bin:/bin:$PATH"
        CMD ["/usr/bin/sleep", "infinity"]
    image: kafka-tools:latest
    restart: unless-stopped
    cpus: "0.5"
    mem_limit: 350m
    memswap_limit: -1
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - eureka-net
    healthcheck:
      test: ["CMD", "/bin/bash", "-c", "kafka-topics.sh --bootstrap-server kafka.eureka:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 3s

  ### Vault (required) ###
  vault:
    container_name: vault
    image: folio-vault:latest
    restart: unless-stopped
    build:
      context: ./folio-vault
      dockerfile: Dockerfile
    cpus: 4
    mem_limit: 500m
    memswap_limit: -1
    environment:
      VAULT_ADDR: http://0.0.0.0:8200
      VAULT_API_ADDR: http://0.0.0.0:8200
    volumes:
      - vault-data:/vault/data:rw
      - vault-file:/vault/file
      - vault-logs:/vault/logs
    cap_add: [IPC_LOCK]
    user: root
    networks:
      - eureka-net
    ports:
      - "8200:8200"
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 5s
      timeout: 10s
      retries: 30

  ### Keycloak Nginx edge-proxy (required), Keycloak (required) ###
  keycloak:
    container_name: keycloak
    image: nginx:1.27.4
    restart: unless-stopped
    cpus: 1
    mem_limit: 35m
    memswap_limit: -1
    depends_on:
      - keycloak-internal
    volumes:
      - ./folio-keycloak-nginx/keycloak-nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - eureka-net
    ports:
      - "8080:8080"
    sysctls:
      net.ipv4.ip_local_port_range: "10240 65535"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 15s
      timeout: 2s
      retries: 15

  # Source repository: https://github.com/folio-org/folio-keycloak
  keycloak-internal:
    container_name: keycloak-internal
    image: folio-keycloak:latest
    restart: unless-stopped
    build:
      context: ./folio-keycloak
      dockerfile: Dockerfile
    cpus: 4
    mem_limit: 2g
    memswap_limit: -1
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_healthy
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_FOLIO_BE_ADMIN_CLIENT_ID: supersecret
      KC_FOLIO_BE_ADMIN_CLIENT_SECRET: supersecret
      KC_DB_URL_HOST: postgres.eureka
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak_rw
      KC_DB_PASSWORD: supersecret
      KC_PROXY: edge
      KC_HOSTNAME: keycloak.eureka
      KC_HOSTNAME_PORT: 8080
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_LOG_LEVEL: INFO
      JAVA_OPTS_APPEND: "-Xms768m -Xmx1024m"
    networks:
      - eureka-net

  ### Kong (required) ###
  # Source repository: https://github.com/folio-org/folio-kong
  kong:
    container_name: kong
    image: folio-kong:latest
    restart: unless-stopped
    build:
      context: ./folio-kong
      dockerfile: Dockerfile
    cpus: 4
    mem_limit: 2g
    memswap_limit: -1
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_NGINX_HTTP_LARGE_CLIENT_HEADER_BUFFERS: 4 200k
      KONG_PG_HOST: postgres
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong_rw
      KONG_PG_PASSWORD: supersecret
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_PLUGINS: bundled
      KONG_LOG_LEVEL: debug
      ENV: local
    networks:
      - eureka-net
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10

  ### Elasticsearch (required for mod-search), Kibana (optional) ###
  kibana:
    container_name: kibana
    image: bitnamilegacy/kibana:8.18.0-debian-12-r1
    restart: unless-stopped
    cpus: 1
    mem_limit: 1g
    memswap_limit: -1
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    networks:
      - eureka-net
    ports:
      - 15601:5601
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"]
      interval: 10s
      timeout: 10s
      retries: 120

  elasticsearch:
    container_name: elasticsearch
    image: bitnamilegacy/elasticsearch:8.18.0-debian-12-r2
    restart: unless-stopped
    cpus: 1
    mem_limit: 2g
    memswap_limit: -1
    environment:
      ELASTICSEARCH_PLUGINS: "analysis-icu,analysis-kuromoji,analysis-smartcn,analysis-nori,analysis-phonetic"
    networks:
      - eureka-net
    ports:
      - 9200:9200
      - 9300:9300
    healthcheck:
      test: curl -s http://elasticsearch:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 30

  ### Minio (required for mod-data-export-worker), Minio MC (required) ###
  minio:
    container_name: minio
    image: minio/minio:RELEASE.2025-03-12T18-04-18Z
    restart: unless-stopped
    command: server /data --console-address ":9001"
    cpus: 1
    mem_limit: 500m
    memswap_limit: -1
    volumes:
      - minio-data:/data
    networks:
      - eureka-net
    ports:
      - 9000:9000
      - 9001:9001
    healthcheck:
      test: curl -k -f http://127.0.0.1:9001/minio/health/live || exit 1
      interval: 30s
      timeout: 10s
      retries: 30

  # Will terminate after running its commands to create a bucket in minio
  createbuckets:
    container_name: createbuckets
    image: minio/mc:RELEASE.2025-03-12T17-29-24Z
    restart: on-failure
    cpus: 1
    mem_limit: 300m
    memswap_limit: -1
    networks:
      - eureka-net
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add minio http://minio.eureka:9000 minioadmin minioadmin;
      /usr/bin/mc rm -r --force minio/example-bucket;
      /usr/bin/mc mb minio/example-bucket;
      exit 0;
      "

  ### FTP Server (required by mod-data-export-worker) ###
  ftp-server:
    container_name: ftp-server
    image: garethflowers/ftp-server
    restart: on-failure
    cpus: "0.5"
    mem_limit: 100m
    memswap_limit: -1
    volumes:
      - ftp-data:/home/folio
    networks:
      - eureka-net
    environment:
      - PUBLIC_IP=0.0.0.0
      - FTP_USER=folio
      - FTP_PASS=folio
    ports:
      - "20-21:20-21/tcp"
      - "40000-40009:40000-40009/tcp"
