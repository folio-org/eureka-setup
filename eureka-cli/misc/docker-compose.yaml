networks:
  eureka-net:
    name: eureka
    driver: bridge

volumes:
  postgres-data: 
    name: eureka_postgres_data
  vault-data: 
    name: eureka_vault_data
  kafka-data: 
    name: eureka_kafka_data

services:
  ### Postgres ###
  postgres:
    container_name: postgres
    image: postgres:16.8
    restart: unless-stopped
    command: -c max_connections=500 -c shared_buffers=1024MB -c log_duration=on -c log_min_duration_statement=0ms -c shared_preload_libraries=pg_stat_statements -c max_locks_per_transaction=1024 -c jit=off
    cpus: 2
    mem_limit: 1g
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: supersecret
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks: 
      - eureka-net
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 10s
      retries: 10

  ### Kafka ###
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    restart: unless-stopped
    cpus: '0.5'
    mem_limit: 350m
    depends_on:
      zookeeper:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka-local
      KAFKA_CLUSTERS_0_JMXPORT: 9997
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka.eureka:9091
    networks: 
      - eureka-net
    ports:
      - "9080:8080"
    healthcheck:
      test: wget --spider --timeout 1 localhost:8080
      interval: 10s
      timeout: 10s
      retries: 10

  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:3.9.3
    restart: unless-stopped
    cpus: 1
    mem_limit: 200m
    environment:
      ZOO_SERVER_ID: 1
      ZOO_PORT_NUMBER: 2181
      ZOO_TICK_TIME: 2000
      ZOO_LOG_LEVEL: INFO
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks: 
      - eureka-net
    ports:
      - "2181:2181"
    healthcheck:
      test: nc -zv localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 5s

  kafka:
    container_name: kafka
    image: bitnami/kafka:3.9.0
    restart: unless-stopped
    cpus: 2
    mem_limit: 2g
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9091,EXTERNAL://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://:9091,EXTERNAL://kafka.eureka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper.eureka:2181
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_LOG_RETENTION_BYTES: -1
      KAFKA_CFG_LOG_RETENTION_HOURS: -1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/kafka
    networks: 
      - eureka-net
    ports:
      - "9092:9092"
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9091", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 5s

  ### Vault ###
  vault:
    container_name: vault
    image: folio-vault:latest
    restart: unless-stopped
    build:
      context: ./folio-vault
      dockerfile: Dockerfile
    environment:
      VAULT_ADDR: http://0.0.0.0:8200
      VAULT_API_ADDR: http://0.0.0.0:8200
    volumes:
      - vault-data:/vault/data:rw
    cap_add: [ IPC_LOCK ]
    networks: 
      - eureka-net
    ports:
      - "8200:8200"
    healthcheck:
      test: [ "CMD", "vault", "status" ]
      interval: 5s
      timeout: 10s
      retries: 30

  ### Keycloak ###
  keycloak:
    container_name: keycloak
    image: nginx:1.27.4
    restart: unless-stopped
    cpus: 1
    mem_limit: 35m
    depends_on:
      - keycloak-internal
    volumes:
      - ./folio-keycloak-nginx/keycloak-nginx.conf:/etc/nginx/nginx.conf:ro
    networks: 
      - eureka-net
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 15s
      timeout: 2s
      retries: 15

  # Source repository: https://github.com/folio-org/folio-keycloak
  keycloak-internal:
    container_name: keycloak-internal
    image: folio-keycloak:latest
    restart: unless-stopped
    build:
      context: ./folio-keycloak
      dockerfile: Dockerfile
    cpus: 4
    mem_limit: 2g
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_healthy
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_FOLIO_BE_ADMIN_CLIENT_ID: supersecret
      KC_FOLIO_BE_ADMIN_CLIENT_SECRET: supersecret
      KC_DB_URL_HOST: postgres.eureka
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak_rw
      KC_DB_PASSWORD: supersecret
      KC_PROXY: edge
      KC_HOSTNAME: keycloak.eureka
      KC_HOSTNAME_PORT: 8080
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: true
      KC_HOSTNAME_STRICT_HTTPS: false
      JAVA_OPTS_APPEND: "-Xms768m -Xmx1024m"
      KC_LOG_LEVEL: INFO
      DEBUG: true
      DEBUG_PORT: '*:8787'
    networks: 
      - eureka-net
    ports:
      - "18081:8080"
      - "18787:8787"
      - "19000:9000"

  ### Kong ###
  # Source repository: https://github.com/folio-org/folio-kong
  kong-local:
    container_name: kong-local
    image: folio-kong:latest
    restart: unless-stopped
    build:
      context: ./folio-kong
      dockerfile: Dockerfile
    cpus: 4
    mem_limit: 2g
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_NGINX_HTTP_LARGE_CLIENT_HEADER_BUFFERS: 4 200k
      KONG_PG_HOST: postgres
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong_rw
      KONG_PG_PASSWORD: supersecret
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_PLUGINS: bundled
      KONG_LOG_LEVEL: debug
      ENV: local
    networks: 
      - eureka-net
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
      - "8443:8443"
      - "8444:8444"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
  
  ### Elasticsearch ###
  # An optional service when deploying mod-search
  # kibana:
  #   container_name: kibana
  #   image: bitnami/kibana:8.17.3
  #   restart: unless-stopped
  #   cpus: 1
  #   mem_limit: 1g
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #   environment:
  #     ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
  #   networks: 
  #     - eureka-net
  #   ports:
  #     - 15601:5601 
  #   healthcheck:
  #     test: [ "CMD-SHELL", "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'" ]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 120
 
  # A required service when deploying mod-search
  # elasticsearch:
  #   container_name: elasticsearch
  #   image: bitnami/elasticsearch:8.17.3
  #   restart: unless-stopped
  #   cpus: 1
  #   mem_limit: 1g
  #   environment:
  #     ELASTICSEARCH_PLUGINS:
  #       "analysis-icu,analysis-kuromoji,analysis-smartcn,analysis-nori,analysis-phonetic"
  #   networks: 
  #     - eureka-net
  #   ports:
  #     - 9200:9200
  #     - 9300:9300
  #   healthcheck:
  #     test: curl -s http://elasticsearch:9200 >/dev/null || exit 1
  #     interval: 30s
  #     timeout: 10s
  #     retries: 30
      
  ### Netcat ###
  netcat:
    container_name: netcat
    build:
      context: .
      dockerfile_inline: |
        FROM nginx:1.27.4
        RUN apt update; apt install netcat-traditional -y 
    image: netcat:latest
    restart: unless-stopped
    cpus: '0.25'
    mem_limit: 35m
    networks: 
      - eureka-net
    ports:
      - "8445:80"
    healthcheck:
      test: nc -zv localhost 80 || exit -1
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 5s
      
  # TODO Minio